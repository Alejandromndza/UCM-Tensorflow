
model {
  faster_rcnn {
    num_classes: 1
    image_resizer {
      keep_aspect_ratio_resizer {
      # Nuestro dataset UCM - Pistolas generalmente se compone por imágenes de 848 x 480
      # Si queremos ajustar estas iamgenes con altura 600 entonces tendremos que cálcular
      # la dimension máxima así 848 / (480 / 600) = 1060
        min_dimension: 600
        max_dimension: 1060
      }
    }
    feature_extractor {
      # Por las comparativas realizadas, se dicidio usar el backbone inception
      # Necesitamos que nuestra red profundice en términos de convolución para extraer las
      # características por lo que se establecio en 16.
      type: 'faster_rcnn_inception_v2'
      first_stage_features_stride: 16
    }
    first_stage_anchor_generator {
      grid_anchor_generator {
        scales: [0.25, 0.5, 1.0, 2.0]
        aspect_ratios: [0.5, 1.0, 2.0]
        height_stride: 16
        width_stride: 16
      }
    }

    first_stage_box_predictor_conv_hyperparams {
      op: CONV
      regularizer {
      	# Hemos optado por el optimizador l2, ya que disminuye los coeficientes
      	# esto minimiza el efecto de correlación de entrada y hace que el modelo 
      	# generalice mejor. Y esto en un detector de armas es muy importante dada
      	# la diversidad de escenarios en el que va a ser expuesto.
        l2_regularizer {
          weight: 0.0
        }
      }
      initializer {
      	# Se utiliza este inicializador ya que genera números aleatorios cuya media 
      	# es cercana al 0. Produce valores similares que un normal initializer pero
      	# Los valores que  dos veces la desviación estándar se vuelven a generar
        truncated_normal_initializer {
          stddev: 0.01
        }
      }
    }
    first_stage_nms_score_threshold: 0.0
    first_stage_nms_iou_threshold: 0.7
    # El valor de first_stage_max_proposals se ajusta ya que no queremos que haya demasiadas
    # propuestas a evaluar en nuestro modelo ya que solo disponemos de una clase
    first_stage_max_proposals: 150
    first_stage_localization_loss_weight: 2.0
    first_stage_objectness_loss_weight: 1.0
    initial_crop_size: 14
    maxpool_kernel_size: 2
    maxpool_stride: 2
    second_stage_box_predictor {
      mask_rcnn_box_predictor {
      # No utilizamos dropout ya que nuestra red no esta en riesgo de sobrealimentación
        use_dropout: false
        dropout_keep_probability: 1.0
        fc_hyperparams {
          op: FC
          regularizer {
            l2_regularizer {
              weight: 0.0
            }
          }
          initializer {
            variance_scaling_initializer {
              factor: 1.0
              uniform: true
              mode: FAN_AVG
            }
          }
        }
      }
    }
    second_stage_post_processing {
      batch_non_max_suppression {
        score_threshold: 0.0
        iou_threshold: 0.6
        # Ajustamos estos valores por tener solo una clase y no queremos que haya un sobreprocesamiento
        max_detections_per_class: 50
        max_total_detections: 150
      }
      # Se utiliza Sigmoid ya que softmax es utilizado para clasificaciones multiclase
      score_converter: SIGMOID
    }
    second_stage_localization_loss_weight: 2.0
    second_stage_classification_loss_weight: 1.0
  }
}

# Ajustamos los parámetros de learning rate según nuestro programa de entrenamiento

train_config: {
  batch_size: 1
  optimizer {
    momentum_optimizer: {
      learning_rate: {
        manual_step_learning_rate {
          initial_learning_rate: 0.0002
          schedule {
            step: 20000
            learning_rate: .0002
          }
          schedule {
            step: 40000
            learning_rate: .000002
          }
        }
      }
      momentum_optimizer_value: 0.9
    }
    use_moving_average: false
  }
  gradient_clipping_by_norm: 10.0

  # Utilizamos el modelo pre-entrenado de coco para facilitarnos el trabajo y que la red no parta de 0
  fine_tune_checkpoint: "C:/tensorflow1/models/research/object_detection/faster_rcnn_inception_v2_coco_2018_01_28/model.ckpt"
  from_detection_checkpoint: true

  # Consideramos que con 70000 pasos el clasificador ya puede dar buenos resultados
  num_steps: 70000
  
  data_augmentation_options {
    random_horizontal_flip {
    }
  }
}


train_input_reader: {
  tf_record_input_reader {
    input_path: "C:/tensorflow1/models/research/object_detection/train.record"
  }
  label_map_path: "C:/tensorflow1/models/research/object_detection/training/labelmap.pbtxt"
}

eval_config: {

  # Nuestro dataset se componía de 577 imagenes de test 
  num_examples: 577
  # Limitamos las evaluaciones a 5 al no tener un dataset grande 
  max_evals: 5
}

eval_input_reader: {
  tf_record_input_reader {
    input_path: "C:/tensorflow/models/research/object_detection/test.record"
  }
  label_map_path: "C:/tensorflow1/models/research/object_detection/training/labelmap.pbtxt"
  shuffle: false
  num_readers: 1
}